name: GitHub Actions CD
run-name: Deploy Spring Boot
on:
  workflow_dispatch:
  push:
    branches:
      - "main"
jobs:
  Push-To-Image-Repo:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: hrm-be
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}

      - name: Authen DO registry
        run: doctl registry login

      - name: Create firebase config
        run: |
          cat << EOF > ./src/main/resources/firebase-service-account.json
          {
            "type": "service_account",
            "project_id": "doan-d45ca",
            "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
            "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
            "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
            "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}",
            "universe_domain": "googleapis.com"
          }
          EOF

      - name: Build docker image
        run: | 
          docker build . -t ${{ env.IMAGE_NAME }}:latest \
            --build-arg ARG_DO_S3_KEY=${{ secrets.DO_S3_KEY }} \
            --build-arg ARG_DO_S3_SECRET=${{ secrets.DO_S3_SECRET }} \
            --build-arg ARG_DO_S3_ENDPOINT=${{ secrets.DO_S3_ENDPOINT }} \
            --build-arg ARG_DO_S3_REGION=${{ secrets.DO_S3_REGION }} \
            --build-arg ARG_DO_S3_BUCKET=${{ secrets.DO_S3_BUCKET }}

      - name: Tag image with DO
        run: docker tag ${{ env.IMAGE_NAME }}:latest registry.digitalocean.com/capstone-registry/${{ env.IMAGE_NAME }}:latest

      - name: Push image to registry
        run: docker push registry.digitalocean.com/capstone-registry/${{ env.IMAGE_NAME }}:latest

      - name: Trigger garbage collection
        run: |
          echo $(doctl registry garbage-collection get-active -o json) > info.json
          cat info.json
          GB_UUID=$(jq -r '.[0].uuid' info.json 2>/dev/null || echo "")
          if [[ -z "$GB_UUID" ]]; then
            echo "There is no garbage collection action currently running"
          else
          echo "There is a garbage collection action currently running, UUID: ${GB_UUID}. Cancel it now"
            doctl registry garbage-collection cancel "${GB_UUID}"
            sleep 15
          fi
          echo "Trigger a new garbage collection action"
          doctl registry garbage-collection start -f --include-untagged-manifests

  Trigger-Redeploy:
    needs: Push-To-Image-Repo
    runs-on: ubuntu-latest
    env:
      DROPLET_IP: 209.38.56.58
      SERVICE: springboot
    steps:
      - name: Redeploy and clean up
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd app
            docker compose pull ${{ env.SERVICE }}
            docker compose --env-file .env --env-file .env.prod -f docker-compose.yml up --build --force-recreate -d --no-deps ${{ env.SERVICE }}
            docker image prune -f