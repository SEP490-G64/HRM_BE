name: GitHub Actions CI
run-name: CI for Spring Boot
on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - "develop"
      - "main"
jobs:
  Spring-Boot-Build:
    env:
      DOCKER_CACHE_PATH: postgres-image.tar
      IMAGE_VERSION: postgres:16-alpine
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code in base branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v4

      - name: Check out repository code in a pull request
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven
      
      - name: Linting for Java - Using Google
        uses: axel-op/googlejavaformat-action@v3
        with:
          args: "--skip-sorting-imports --replace"
      
      - name: Print diffs
        run: git --no-pager diff

      - name: Login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Restore cached image
        id: cache-image-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.DOCKER_CACHE_PATH }}
          key: "${{ runner.os }}-Postgres-Image"

      - name: Load cache image
        if: steps.cache-image-restore.outputs.cache-hit == 'true'
        run: docker load -i ${{ env.DOCKER_CACHE_PATH }}

      - name: Run Unit Testing with Junit
        run: |
          export AWS_JAVA_V1_DISABLE_DEPRECATION_ANNOUNCEMENT=true #Disable AWS alert
          mvn clean test -fae

      - name: Init cache postgres image
        if: steps.cache-image-restore.outputs.cache-hit != 'true'
        run: docker save ${{ env.IMAGE_VERSION }} -o ${{ env.DOCKER_CACHE_PATH }}

      - name: Cache docker build
        if: steps.cache-image-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.DOCKER_CACHE_PATH }}
          key: "${{ runner.os }}-Postgres-Image"

  Push-To-Image-Repo:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: hrm-be
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}

      - name: Authen DO registry
        run: doctl registry login

      - name: Build docker image
        run: docker build . -t ${{ env.IMAGE_NAME }}:latest

      - name: Tag image with DO
        run: docker tag hrm-fe:latest registry.digitalocean.com/capstone-registry/${{ env.IMAGE_NAME }}:latest

      - name: Push image to registry
        run: docker push registry.digitalocean.com/capstone-registry/${{ env.IMAGE_NAME }}:latest